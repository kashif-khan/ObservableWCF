//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceLibrary.PeerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PeerServiceReference.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/MethodThatWillChangeData")]
        void MethodThatWillChangeData(int value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/MethodThatWillChangeData")]
        System.Threading.Tasks.Task MethodThatWillChangeDataAsync(int value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : WcfServiceLibrary.PeerServiceReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<WcfServiceLibrary.PeerServiceReference.IUserService>, WcfServiceLibrary.PeerServiceReference.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void MethodThatWillChangeData(int value) {
            base.Channel.MethodThatWillChangeData(value);
        }
        
        public System.Threading.Tasks.Task MethodThatWillChangeDataAsync(int value) {
            return base.Channel.MethodThatWillChangeDataAsync(value);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PeerServiceReference.ISubscription", CallbackContract=typeof(WcfServiceLibrary.PeerServiceReference.ISubscriptionCallback))]
    public interface ISubscription {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifications/AnnounceClientAgeToClients")]
        void AnnounceClientAgeToClients(int newValue);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifications/AnnounceClientAgeToClients")]
        System.Threading.Tasks.Task AnnounceClientAgeToClientsAsync(int newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscription/Subscribe", ReplyAction="http://tempuri.org/ISubscription/SubscribeResponse")]
        void Subscribe(string ServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscription/Subscribe", ReplyAction="http://tempuri.org/ISubscription/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(string ServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscription/Unsubscribe", ReplyAction="http://tempuri.org/ISubscription/UnsubscribeResponse")]
        void Unsubscribe(string ServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscription/Unsubscribe", ReplyAction="http://tempuri.org/ISubscription/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync(string ServiceName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubscriptionCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISubscription/AnnounceClientAgeToClients")]
        void AnnounceClientAgeToClients(int newValue);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubscriptionChannel : WcfServiceLibrary.PeerServiceReference.ISubscription, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscriptionClient : System.ServiceModel.DuplexClientBase<WcfServiceLibrary.PeerServiceReference.ISubscription>, WcfServiceLibrary.PeerServiceReference.ISubscription {
        
        public SubscriptionClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SubscriptionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SubscriptionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SubscriptionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SubscriptionClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AnnounceClientAgeToClients(int newValue) {
            base.Channel.AnnounceClientAgeToClients(newValue);
        }
        
        public System.Threading.Tasks.Task AnnounceClientAgeToClientsAsync(int newValue) {
            return base.Channel.AnnounceClientAgeToClientsAsync(newValue);
        }
        
        public void Subscribe(string ServiceName) {
            base.Channel.Subscribe(ServiceName);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(string ServiceName) {
            return base.Channel.SubscribeAsync(ServiceName);
        }
        
        public void Unsubscribe(string ServiceName) {
            base.Channel.Unsubscribe(ServiceName);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(string ServiceName) {
            return base.Channel.UnsubscribeAsync(ServiceName);
        }
    }
}
